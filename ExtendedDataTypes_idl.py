# Python stubs generated by omniidl from idl/ExtendedDataTypes.idl

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA

_omnipy.checkVersion(3,0, __file__)

# #include "BasicDataType.idl"
import BasicDataType_idl
_0_RTC = omniORB.openModule("RTC")
_0_RTC__POA = omniORB.openModule("RTC__POA")

#
# Start of module "RTC"
#
__name__ = "RTC"
_0_RTC = omniORB.openModule("RTC", r"idl/ExtendedDataTypes.idl")
_0_RTC__POA = omniORB.openModule("RTC__POA", r"idl/ExtendedDataTypes.idl")


# struct RGBColour
_0_RTC.RGBColour = omniORB.newEmptyClass()
class RGBColour (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/RGBColour:1.0"

    def __init__(self, r, g, b):
        self.r = r
        self.g = g
        self.b = b

_0_RTC.RGBColour = RGBColour
_0_RTC._d_RGBColour  = (omniORB.tcInternal.tv_struct, RGBColour, RGBColour._NP_RepositoryId, "RGBColour", "r", omniORB.tcInternal.tv_double, "g", omniORB.tcInternal.tv_double, "b", omniORB.tcInternal.tv_double)
_0_RTC._tc_RGBColour = omniORB.tcInternal.createTypeCode(_0_RTC._d_RGBColour)
omniORB.registerType(RGBColour._NP_RepositoryId, _0_RTC._d_RGBColour, _0_RTC._tc_RGBColour)
del RGBColour

# struct Point2D
_0_RTC.Point2D = omniORB.newEmptyClass()
class Point2D (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/Point2D:1.0"

    def __init__(self, x, y):
        self.x = x
        self.y = y

_0_RTC.Point2D = Point2D
_0_RTC._d_Point2D  = (omniORB.tcInternal.tv_struct, Point2D, Point2D._NP_RepositoryId, "Point2D", "x", omniORB.tcInternal.tv_double, "y", omniORB.tcInternal.tv_double)
_0_RTC._tc_Point2D = omniORB.tcInternal.createTypeCode(_0_RTC._d_Point2D)
omniORB.registerType(Point2D._NP_RepositoryId, _0_RTC._d_Point2D, _0_RTC._tc_Point2D)
del Point2D

# struct Vector2D
_0_RTC.Vector2D = omniORB.newEmptyClass()
class Vector2D (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/Vector2D:1.0"

    def __init__(self, x, y):
        self.x = x
        self.y = y

_0_RTC.Vector2D = Vector2D
_0_RTC._d_Vector2D  = (omniORB.tcInternal.tv_struct, Vector2D, Vector2D._NP_RepositoryId, "Vector2D", "x", omniORB.tcInternal.tv_double, "y", omniORB.tcInternal.tv_double)
_0_RTC._tc_Vector2D = omniORB.tcInternal.createTypeCode(_0_RTC._d_Vector2D)
omniORB.registerType(Vector2D._NP_RepositoryId, _0_RTC._d_Vector2D, _0_RTC._tc_Vector2D)
del Vector2D

# struct Pose2D
_0_RTC.Pose2D = omniORB.newEmptyClass()
class Pose2D (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/Pose2D:1.0"

    def __init__(self, position, heading):
        self.position = position
        self.heading = heading

_0_RTC.Pose2D = Pose2D
_0_RTC._d_Pose2D  = (omniORB.tcInternal.tv_struct, Pose2D, Pose2D._NP_RepositoryId, "Pose2D", "position", omniORB.typeMapping["IDL:RTC/Point2D:1.0"], "heading", omniORB.tcInternal.tv_double)
_0_RTC._tc_Pose2D = omniORB.tcInternal.createTypeCode(_0_RTC._d_Pose2D)
omniORB.registerType(Pose2D._NP_RepositoryId, _0_RTC._d_Pose2D, _0_RTC._tc_Pose2D)
del Pose2D

# struct Velocity2D
_0_RTC.Velocity2D = omniORB.newEmptyClass()
class Velocity2D (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/Velocity2D:1.0"

    def __init__(self, vx, vy, va):
        self.vx = vx
        self.vy = vy
        self.va = va

_0_RTC.Velocity2D = Velocity2D
_0_RTC._d_Velocity2D  = (omniORB.tcInternal.tv_struct, Velocity2D, Velocity2D._NP_RepositoryId, "Velocity2D", "vx", omniORB.tcInternal.tv_double, "vy", omniORB.tcInternal.tv_double, "va", omniORB.tcInternal.tv_double)
_0_RTC._tc_Velocity2D = omniORB.tcInternal.createTypeCode(_0_RTC._d_Velocity2D)
omniORB.registerType(Velocity2D._NP_RepositoryId, _0_RTC._d_Velocity2D, _0_RTC._tc_Velocity2D)
del Velocity2D

# struct Acceleration2D
_0_RTC.Acceleration2D = omniORB.newEmptyClass()
class Acceleration2D (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/Acceleration2D:1.0"

    def __init__(self, ax, ay):
        self.ax = ax
        self.ay = ay

_0_RTC.Acceleration2D = Acceleration2D
_0_RTC._d_Acceleration2D  = (omniORB.tcInternal.tv_struct, Acceleration2D, Acceleration2D._NP_RepositoryId, "Acceleration2D", "ax", omniORB.tcInternal.tv_double, "ay", omniORB.tcInternal.tv_double)
_0_RTC._tc_Acceleration2D = omniORB.tcInternal.createTypeCode(_0_RTC._d_Acceleration2D)
omniORB.registerType(Acceleration2D._NP_RepositoryId, _0_RTC._d_Acceleration2D, _0_RTC._tc_Acceleration2D)
del Acceleration2D

# struct PoseVel2D
_0_RTC.PoseVel2D = omniORB.newEmptyClass()
class PoseVel2D (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/PoseVel2D:1.0"

    def __init__(self, pose, velocities):
        self.pose = pose
        self.velocities = velocities

_0_RTC.PoseVel2D = PoseVel2D
_0_RTC._d_PoseVel2D  = (omniORB.tcInternal.tv_struct, PoseVel2D, PoseVel2D._NP_RepositoryId, "PoseVel2D", "pose", omniORB.typeMapping["IDL:RTC/Pose2D:1.0"], "velocities", omniORB.typeMapping["IDL:RTC/Velocity2D:1.0"])
_0_RTC._tc_PoseVel2D = omniORB.tcInternal.createTypeCode(_0_RTC._d_PoseVel2D)
omniORB.registerType(PoseVel2D._NP_RepositoryId, _0_RTC._d_PoseVel2D, _0_RTC._tc_PoseVel2D)
del PoseVel2D

# struct Size2D
_0_RTC.Size2D = omniORB.newEmptyClass()
class Size2D (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/Size2D:1.0"

    def __init__(self, l, w):
        self.l = l
        self.w = w

_0_RTC.Size2D = Size2D
_0_RTC._d_Size2D  = (omniORB.tcInternal.tv_struct, Size2D, Size2D._NP_RepositoryId, "Size2D", "l", omniORB.tcInternal.tv_double, "w", omniORB.tcInternal.tv_double)
_0_RTC._tc_Size2D = omniORB.tcInternal.createTypeCode(_0_RTC._d_Size2D)
omniORB.registerType(Size2D._NP_RepositoryId, _0_RTC._d_Size2D, _0_RTC._tc_Size2D)
del Size2D

# struct Geometry2D
_0_RTC.Geometry2D = omniORB.newEmptyClass()
class Geometry2D (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/Geometry2D:1.0"

    def __init__(self, pose, size):
        self.pose = pose
        self.size = size

_0_RTC.Geometry2D = Geometry2D
_0_RTC._d_Geometry2D  = (omniORB.tcInternal.tv_struct, Geometry2D, Geometry2D._NP_RepositoryId, "Geometry2D", "pose", omniORB.typeMapping["IDL:RTC/Pose2D:1.0"], "size", omniORB.typeMapping["IDL:RTC/Size2D:1.0"])
_0_RTC._tc_Geometry2D = omniORB.tcInternal.createTypeCode(_0_RTC._d_Geometry2D)
omniORB.registerType(Geometry2D._NP_RepositoryId, _0_RTC._d_Geometry2D, _0_RTC._tc_Geometry2D)
del Geometry2D

# struct Covariance2D
_0_RTC.Covariance2D = omniORB.newEmptyClass()
class Covariance2D (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/Covariance2D:1.0"

    def __init__(self, xx, xy, xt, yy, yt, tt):
        self.xx = xx
        self.xy = xy
        self.xt = xt
        self.yy = yy
        self.yt = yt
        self.tt = tt

_0_RTC.Covariance2D = Covariance2D
_0_RTC._d_Covariance2D  = (omniORB.tcInternal.tv_struct, Covariance2D, Covariance2D._NP_RepositoryId, "Covariance2D", "xx", omniORB.tcInternal.tv_double, "xy", omniORB.tcInternal.tv_double, "xt", omniORB.tcInternal.tv_double, "yy", omniORB.tcInternal.tv_double, "yt", omniORB.tcInternal.tv_double, "tt", omniORB.tcInternal.tv_double)
_0_RTC._tc_Covariance2D = omniORB.tcInternal.createTypeCode(_0_RTC._d_Covariance2D)
omniORB.registerType(Covariance2D._NP_RepositoryId, _0_RTC._d_Covariance2D, _0_RTC._tc_Covariance2D)
del Covariance2D

# struct PointCovariance2D
_0_RTC.PointCovariance2D = omniORB.newEmptyClass()
class PointCovariance2D (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/PointCovariance2D:1.0"

    def __init__(self, xx, xy, yy):
        self.xx = xx
        self.xy = xy
        self.yy = yy

_0_RTC.PointCovariance2D = PointCovariance2D
_0_RTC._d_PointCovariance2D  = (omniORB.tcInternal.tv_struct, PointCovariance2D, PointCovariance2D._NP_RepositoryId, "PointCovariance2D", "xx", omniORB.tcInternal.tv_double, "xy", omniORB.tcInternal.tv_double, "yy", omniORB.tcInternal.tv_double)
_0_RTC._tc_PointCovariance2D = omniORB.tcInternal.createTypeCode(_0_RTC._d_PointCovariance2D)
omniORB.registerType(PointCovariance2D._NP_RepositoryId, _0_RTC._d_PointCovariance2D, _0_RTC._tc_PointCovariance2D)
del PointCovariance2D

# struct Carlike
_0_RTC.Carlike = omniORB.newEmptyClass()
class Carlike (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/Carlike:1.0"

    def __init__(self, speed, steeringAngle):
        self.speed = speed
        self.steeringAngle = steeringAngle

_0_RTC.Carlike = Carlike
_0_RTC._d_Carlike  = (omniORB.tcInternal.tv_struct, Carlike, Carlike._NP_RepositoryId, "Carlike", "speed", omniORB.tcInternal.tv_double, "steeringAngle", omniORB.tcInternal.tv_double)
_0_RTC._tc_Carlike = omniORB.tcInternal.createTypeCode(_0_RTC._d_Carlike)
omniORB.registerType(Carlike._NP_RepositoryId, _0_RTC._d_Carlike, _0_RTC._tc_Carlike)
del Carlike

# struct SpeedHeading2D
_0_RTC.SpeedHeading2D = omniORB.newEmptyClass()
class SpeedHeading2D (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/SpeedHeading2D:1.0"

    def __init__(self, speed, heading):
        self.speed = speed
        self.heading = heading

_0_RTC.SpeedHeading2D = SpeedHeading2D
_0_RTC._d_SpeedHeading2D  = (omniORB.tcInternal.tv_struct, SpeedHeading2D, SpeedHeading2D._NP_RepositoryId, "SpeedHeading2D", "speed", omniORB.tcInternal.tv_double, "heading", omniORB.tcInternal.tv_double)
_0_RTC._tc_SpeedHeading2D = omniORB.tcInternal.createTypeCode(_0_RTC._d_SpeedHeading2D)
omniORB.registerType(SpeedHeading2D._NP_RepositoryId, _0_RTC._d_SpeedHeading2D, _0_RTC._tc_SpeedHeading2D)
del SpeedHeading2D

# struct Point3D
_0_RTC.Point3D = omniORB.newEmptyClass()
class Point3D (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/Point3D:1.0"

    def __init__(self, x, y, z):
        self.x = x
        self.y = y
        self.z = z

_0_RTC.Point3D = Point3D
_0_RTC._d_Point3D  = (omniORB.tcInternal.tv_struct, Point3D, Point3D._NP_RepositoryId, "Point3D", "x", omniORB.tcInternal.tv_double, "y", omniORB.tcInternal.tv_double, "z", omniORB.tcInternal.tv_double)
_0_RTC._tc_Point3D = omniORB.tcInternal.createTypeCode(_0_RTC._d_Point3D)
omniORB.registerType(Point3D._NP_RepositoryId, _0_RTC._d_Point3D, _0_RTC._tc_Point3D)
del Point3D

# struct Vector3D
_0_RTC.Vector3D = omniORB.newEmptyClass()
class Vector3D (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/Vector3D:1.0"

    def __init__(self, x, y, z):
        self.x = x
        self.y = y
        self.z = z

_0_RTC.Vector3D = Vector3D
_0_RTC._d_Vector3D  = (omniORB.tcInternal.tv_struct, Vector3D, Vector3D._NP_RepositoryId, "Vector3D", "x", omniORB.tcInternal.tv_double, "y", omniORB.tcInternal.tv_double, "z", omniORB.tcInternal.tv_double)
_0_RTC._tc_Vector3D = omniORB.tcInternal.createTypeCode(_0_RTC._d_Vector3D)
omniORB.registerType(Vector3D._NP_RepositoryId, _0_RTC._d_Vector3D, _0_RTC._tc_Vector3D)
del Vector3D

# struct Orientation3D
_0_RTC.Orientation3D = omniORB.newEmptyClass()
class Orientation3D (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/Orientation3D:1.0"

    def __init__(self, r, p, y):
        self.r = r
        self.p = p
        self.y = y

_0_RTC.Orientation3D = Orientation3D
_0_RTC._d_Orientation3D  = (omniORB.tcInternal.tv_struct, Orientation3D, Orientation3D._NP_RepositoryId, "Orientation3D", "r", omniORB.tcInternal.tv_double, "p", omniORB.tcInternal.tv_double, "y", omniORB.tcInternal.tv_double)
_0_RTC._tc_Orientation3D = omniORB.tcInternal.createTypeCode(_0_RTC._d_Orientation3D)
omniORB.registerType(Orientation3D._NP_RepositoryId, _0_RTC._d_Orientation3D, _0_RTC._tc_Orientation3D)
del Orientation3D

# struct Pose3D
_0_RTC.Pose3D = omniORB.newEmptyClass()
class Pose3D (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/Pose3D:1.0"

    def __init__(self, position, orientation):
        self.position = position
        self.orientation = orientation

_0_RTC.Pose3D = Pose3D
_0_RTC._d_Pose3D  = (omniORB.tcInternal.tv_struct, Pose3D, Pose3D._NP_RepositoryId, "Pose3D", "position", omniORB.typeMapping["IDL:RTC/Point3D:1.0"], "orientation", omniORB.typeMapping["IDL:RTC/Orientation3D:1.0"])
_0_RTC._tc_Pose3D = omniORB.tcInternal.createTypeCode(_0_RTC._d_Pose3D)
omniORB.registerType(Pose3D._NP_RepositoryId, _0_RTC._d_Pose3D, _0_RTC._tc_Pose3D)
del Pose3D

# struct Velocity3D
_0_RTC.Velocity3D = omniORB.newEmptyClass()
class Velocity3D (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/Velocity3D:1.0"

    def __init__(self, vx, vy, vz, vr, vp, va):
        self.vx = vx
        self.vy = vy
        self.vz = vz
        self.vr = vr
        self.vp = vp
        self.va = va

_0_RTC.Velocity3D = Velocity3D
_0_RTC._d_Velocity3D  = (omniORB.tcInternal.tv_struct, Velocity3D, Velocity3D._NP_RepositoryId, "Velocity3D", "vx", omniORB.tcInternal.tv_double, "vy", omniORB.tcInternal.tv_double, "vz", omniORB.tcInternal.tv_double, "vr", omniORB.tcInternal.tv_double, "vp", omniORB.tcInternal.tv_double, "va", omniORB.tcInternal.tv_double)
_0_RTC._tc_Velocity3D = omniORB.tcInternal.createTypeCode(_0_RTC._d_Velocity3D)
omniORB.registerType(Velocity3D._NP_RepositoryId, _0_RTC._d_Velocity3D, _0_RTC._tc_Velocity3D)
del Velocity3D

# struct AngularVelocity3D
_0_RTC.AngularVelocity3D = omniORB.newEmptyClass()
class AngularVelocity3D (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/AngularVelocity3D:1.0"

    def __init__(self, avx, avy, avz):
        self.avx = avx
        self.avy = avy
        self.avz = avz

_0_RTC.AngularVelocity3D = AngularVelocity3D
_0_RTC._d_AngularVelocity3D  = (omniORB.tcInternal.tv_struct, AngularVelocity3D, AngularVelocity3D._NP_RepositoryId, "AngularVelocity3D", "avx", omniORB.tcInternal.tv_double, "avy", omniORB.tcInternal.tv_double, "avz", omniORB.tcInternal.tv_double)
_0_RTC._tc_AngularVelocity3D = omniORB.tcInternal.createTypeCode(_0_RTC._d_AngularVelocity3D)
omniORB.registerType(AngularVelocity3D._NP_RepositoryId, _0_RTC._d_AngularVelocity3D, _0_RTC._tc_AngularVelocity3D)
del AngularVelocity3D

# struct Acceleration3D
_0_RTC.Acceleration3D = omniORB.newEmptyClass()
class Acceleration3D (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/Acceleration3D:1.0"

    def __init__(self, ax, ay, az):
        self.ax = ax
        self.ay = ay
        self.az = az

_0_RTC.Acceleration3D = Acceleration3D
_0_RTC._d_Acceleration3D  = (omniORB.tcInternal.tv_struct, Acceleration3D, Acceleration3D._NP_RepositoryId, "Acceleration3D", "ax", omniORB.tcInternal.tv_double, "ay", omniORB.tcInternal.tv_double, "az", omniORB.tcInternal.tv_double)
_0_RTC._tc_Acceleration3D = omniORB.tcInternal.createTypeCode(_0_RTC._d_Acceleration3D)
omniORB.registerType(Acceleration3D._NP_RepositoryId, _0_RTC._d_Acceleration3D, _0_RTC._tc_Acceleration3D)
del Acceleration3D

# struct AngularAcceleration3D
_0_RTC.AngularAcceleration3D = omniORB.newEmptyClass()
class AngularAcceleration3D (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/AngularAcceleration3D:1.0"

    def __init__(self, aax, aay, aaz):
        self.aax = aax
        self.aay = aay
        self.aaz = aaz

_0_RTC.AngularAcceleration3D = AngularAcceleration3D
_0_RTC._d_AngularAcceleration3D  = (omniORB.tcInternal.tv_struct, AngularAcceleration3D, AngularAcceleration3D._NP_RepositoryId, "AngularAcceleration3D", "aax", omniORB.tcInternal.tv_double, "aay", omniORB.tcInternal.tv_double, "aaz", omniORB.tcInternal.tv_double)
_0_RTC._tc_AngularAcceleration3D = omniORB.tcInternal.createTypeCode(_0_RTC._d_AngularAcceleration3D)
omniORB.registerType(AngularAcceleration3D._NP_RepositoryId, _0_RTC._d_AngularAcceleration3D, _0_RTC._tc_AngularAcceleration3D)
del AngularAcceleration3D

# struct PoseVel3D
_0_RTC.PoseVel3D = omniORB.newEmptyClass()
class PoseVel3D (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/PoseVel3D:1.0"

    def __init__(self, pose, velocities):
        self.pose = pose
        self.velocities = velocities

_0_RTC.PoseVel3D = PoseVel3D
_0_RTC._d_PoseVel3D  = (omniORB.tcInternal.tv_struct, PoseVel3D, PoseVel3D._NP_RepositoryId, "PoseVel3D", "pose", omniORB.typeMapping["IDL:RTC/Pose3D:1.0"], "velocities", omniORB.typeMapping["IDL:RTC/Velocity3D:1.0"])
_0_RTC._tc_PoseVel3D = omniORB.tcInternal.createTypeCode(_0_RTC._d_PoseVel3D)
omniORB.registerType(PoseVel3D._NP_RepositoryId, _0_RTC._d_PoseVel3D, _0_RTC._tc_PoseVel3D)
del PoseVel3D

# struct Size3D
_0_RTC.Size3D = omniORB.newEmptyClass()
class Size3D (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/Size3D:1.0"

    def __init__(self, l, w, h):
        self.l = l
        self.w = w
        self.h = h

_0_RTC.Size3D = Size3D
_0_RTC._d_Size3D  = (omniORB.tcInternal.tv_struct, Size3D, Size3D._NP_RepositoryId, "Size3D", "l", omniORB.tcInternal.tv_double, "w", omniORB.tcInternal.tv_double, "h", omniORB.tcInternal.tv_double)
_0_RTC._tc_Size3D = omniORB.tcInternal.createTypeCode(_0_RTC._d_Size3D)
omniORB.registerType(Size3D._NP_RepositoryId, _0_RTC._d_Size3D, _0_RTC._tc_Size3D)
del Size3D

# struct Geometry3D
_0_RTC.Geometry3D = omniORB.newEmptyClass()
class Geometry3D (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/Geometry3D:1.0"

    def __init__(self, pose, size):
        self.pose = pose
        self.size = size

_0_RTC.Geometry3D = Geometry3D
_0_RTC._d_Geometry3D  = (omniORB.tcInternal.tv_struct, Geometry3D, Geometry3D._NP_RepositoryId, "Geometry3D", "pose", omniORB.typeMapping["IDL:RTC/Pose3D:1.0"], "size", omniORB.typeMapping["IDL:RTC/Size3D:1.0"])
_0_RTC._tc_Geometry3D = omniORB.tcInternal.createTypeCode(_0_RTC._d_Geometry3D)
omniORB.registerType(Geometry3D._NP_RepositoryId, _0_RTC._d_Geometry3D, _0_RTC._tc_Geometry3D)
del Geometry3D

# struct Covariance3D
_0_RTC.Covariance3D = omniORB.newEmptyClass()
class Covariance3D (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/Covariance3D:1.0"

    def __init__(self, xx, xy, xz, xr, xp, xa, yy, yz, yr, yp, ya, zz, zr, zp, za, rr, rp, ra, pp, pa, aa):
        self.xx = xx
        self.xy = xy
        self.xz = xz
        self.xr = xr
        self.xp = xp
        self.xa = xa
        self.yy = yy
        self.yz = yz
        self.yr = yr
        self.yp = yp
        self.ya = ya
        self.zz = zz
        self.zr = zr
        self.zp = zp
        self.za = za
        self.rr = rr
        self.rp = rp
        self.ra = ra
        self.pp = pp
        self.pa = pa
        self.aa = aa

_0_RTC.Covariance3D = Covariance3D
_0_RTC._d_Covariance3D  = (omniORB.tcInternal.tv_struct, Covariance3D, Covariance3D._NP_RepositoryId, "Covariance3D", "xx", omniORB.tcInternal.tv_double, "xy", omniORB.tcInternal.tv_double, "xz", omniORB.tcInternal.tv_double, "xr", omniORB.tcInternal.tv_double, "xp", omniORB.tcInternal.tv_double, "xa", omniORB.tcInternal.tv_double, "yy", omniORB.tcInternal.tv_double, "yz", omniORB.tcInternal.tv_double, "yr", omniORB.tcInternal.tv_double, "yp", omniORB.tcInternal.tv_double, "ya", omniORB.tcInternal.tv_double, "zz", omniORB.tcInternal.tv_double, "zr", omniORB.tcInternal.tv_double, "zp", omniORB.tcInternal.tv_double, "za", omniORB.tcInternal.tv_double, "rr", omniORB.tcInternal.tv_double, "rp", omniORB.tcInternal.tv_double, "ra", omniORB.tcInternal.tv_double, "pp", omniORB.tcInternal.tv_double, "pa", omniORB.tcInternal.tv_double, "aa", omniORB.tcInternal.tv_double)
_0_RTC._tc_Covariance3D = omniORB.tcInternal.createTypeCode(_0_RTC._d_Covariance3D)
omniORB.registerType(Covariance3D._NP_RepositoryId, _0_RTC._d_Covariance3D, _0_RTC._tc_Covariance3D)
del Covariance3D

# struct SpeedHeading3D
_0_RTC.SpeedHeading3D = omniORB.newEmptyClass()
class SpeedHeading3D (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/SpeedHeading3D:1.0"

    def __init__(self, speed, direction):
        self.speed = speed
        self.direction = direction

_0_RTC.SpeedHeading3D = SpeedHeading3D
_0_RTC._d_SpeedHeading3D  = (omniORB.tcInternal.tv_struct, SpeedHeading3D, SpeedHeading3D._NP_RepositoryId, "SpeedHeading3D", "speed", omniORB.tcInternal.tv_double, "direction", omniORB.typeMapping["IDL:RTC/Orientation3D:1.0"])
_0_RTC._tc_SpeedHeading3D = omniORB.tcInternal.createTypeCode(_0_RTC._d_SpeedHeading3D)
omniORB.registerType(SpeedHeading3D._NP_RepositoryId, _0_RTC._d_SpeedHeading3D, _0_RTC._tc_SpeedHeading3D)
del SpeedHeading3D

# struct OAP
_0_RTC.OAP = omniORB.newEmptyClass()
class OAP (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/OAP:1.0"

    def __init__(self, orientation, approach, position):
        self.orientation = orientation
        self.approach = approach
        self.position = position

_0_RTC.OAP = OAP
_0_RTC._d_OAP  = (omniORB.tcInternal.tv_struct, OAP, OAP._NP_RepositoryId, "OAP", "orientation", omniORB.typeMapping["IDL:RTC/Vector3D:1.0"], "approach", omniORB.typeMapping["IDL:RTC/Vector3D:1.0"], "position", omniORB.typeMapping["IDL:RTC/Vector3D:1.0"])
_0_RTC._tc_OAP = omniORB.tcInternal.createTypeCode(_0_RTC._d_OAP)
omniORB.registerType(OAP._NP_RepositoryId, _0_RTC._d_OAP, _0_RTC._tc_OAP)
del OAP

# struct TimedRGBColour
_0_RTC.TimedRGBColour = omniORB.newEmptyClass()
class TimedRGBColour (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/TimedRGBColour:1.0"

    def __init__(self, tm, data):
        self.tm = tm
        self.data = data

_0_RTC.TimedRGBColour = TimedRGBColour
_0_RTC._d_TimedRGBColour  = (omniORB.tcInternal.tv_struct, TimedRGBColour, TimedRGBColour._NP_RepositoryId, "TimedRGBColour", "tm", omniORB.typeMapping["IDL:RTC/Time:1.0"], "data", omniORB.typeMapping["IDL:RTC/RGBColour:1.0"])
_0_RTC._tc_TimedRGBColour = omniORB.tcInternal.createTypeCode(_0_RTC._d_TimedRGBColour)
omniORB.registerType(TimedRGBColour._NP_RepositoryId, _0_RTC._d_TimedRGBColour, _0_RTC._tc_TimedRGBColour)
del TimedRGBColour

# struct TimedPoint2D
_0_RTC.TimedPoint2D = omniORB.newEmptyClass()
class TimedPoint2D (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/TimedPoint2D:1.0"

    def __init__(self, tm, data):
        self.tm = tm
        self.data = data

_0_RTC.TimedPoint2D = TimedPoint2D
_0_RTC._d_TimedPoint2D  = (omniORB.tcInternal.tv_struct, TimedPoint2D, TimedPoint2D._NP_RepositoryId, "TimedPoint2D", "tm", omniORB.typeMapping["IDL:RTC/Time:1.0"], "data", omniORB.typeMapping["IDL:RTC/Point2D:1.0"])
_0_RTC._tc_TimedPoint2D = omniORB.tcInternal.createTypeCode(_0_RTC._d_TimedPoint2D)
omniORB.registerType(TimedPoint2D._NP_RepositoryId, _0_RTC._d_TimedPoint2D, _0_RTC._tc_TimedPoint2D)
del TimedPoint2D

# struct TimedVector2D
_0_RTC.TimedVector2D = omniORB.newEmptyClass()
class TimedVector2D (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/TimedVector2D:1.0"

    def __init__(self, tm, data):
        self.tm = tm
        self.data = data

_0_RTC.TimedVector2D = TimedVector2D
_0_RTC._d_TimedVector2D  = (omniORB.tcInternal.tv_struct, TimedVector2D, TimedVector2D._NP_RepositoryId, "TimedVector2D", "tm", omniORB.typeMapping["IDL:RTC/Time:1.0"], "data", omniORB.typeMapping["IDL:RTC/Vector2D:1.0"])
_0_RTC._tc_TimedVector2D = omniORB.tcInternal.createTypeCode(_0_RTC._d_TimedVector2D)
omniORB.registerType(TimedVector2D._NP_RepositoryId, _0_RTC._d_TimedVector2D, _0_RTC._tc_TimedVector2D)
del TimedVector2D

# struct TimedPose2D
_0_RTC.TimedPose2D = omniORB.newEmptyClass()
class TimedPose2D (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/TimedPose2D:1.0"

    def __init__(self, tm, data):
        self.tm = tm
        self.data = data

_0_RTC.TimedPose2D = TimedPose2D
_0_RTC._d_TimedPose2D  = (omniORB.tcInternal.tv_struct, TimedPose2D, TimedPose2D._NP_RepositoryId, "TimedPose2D", "tm", omniORB.typeMapping["IDL:RTC/Time:1.0"], "data", omniORB.typeMapping["IDL:RTC/Pose2D:1.0"])
_0_RTC._tc_TimedPose2D = omniORB.tcInternal.createTypeCode(_0_RTC._d_TimedPose2D)
omniORB.registerType(TimedPose2D._NP_RepositoryId, _0_RTC._d_TimedPose2D, _0_RTC._tc_TimedPose2D)
del TimedPose2D

# struct TimedVelocity2D
_0_RTC.TimedVelocity2D = omniORB.newEmptyClass()
class TimedVelocity2D (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/TimedVelocity2D:1.0"

    def __init__(self, tm, data):
        self.tm = tm
        self.data = data

_0_RTC.TimedVelocity2D = TimedVelocity2D
_0_RTC._d_TimedVelocity2D  = (omniORB.tcInternal.tv_struct, TimedVelocity2D, TimedVelocity2D._NP_RepositoryId, "TimedVelocity2D", "tm", omniORB.typeMapping["IDL:RTC/Time:1.0"], "data", omniORB.typeMapping["IDL:RTC/Velocity2D:1.0"])
_0_RTC._tc_TimedVelocity2D = omniORB.tcInternal.createTypeCode(_0_RTC._d_TimedVelocity2D)
omniORB.registerType(TimedVelocity2D._NP_RepositoryId, _0_RTC._d_TimedVelocity2D, _0_RTC._tc_TimedVelocity2D)
del TimedVelocity2D

# struct TimedAcceleration2D
_0_RTC.TimedAcceleration2D = omniORB.newEmptyClass()
class TimedAcceleration2D (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/TimedAcceleration2D:1.0"

    def __init__(self, tm, data):
        self.tm = tm
        self.data = data

_0_RTC.TimedAcceleration2D = TimedAcceleration2D
_0_RTC._d_TimedAcceleration2D  = (omniORB.tcInternal.tv_struct, TimedAcceleration2D, TimedAcceleration2D._NP_RepositoryId, "TimedAcceleration2D", "tm", omniORB.typeMapping["IDL:RTC/Time:1.0"], "data", omniORB.typeMapping["IDL:RTC/Acceleration2D:1.0"])
_0_RTC._tc_TimedAcceleration2D = omniORB.tcInternal.createTypeCode(_0_RTC._d_TimedAcceleration2D)
omniORB.registerType(TimedAcceleration2D._NP_RepositoryId, _0_RTC._d_TimedAcceleration2D, _0_RTC._tc_TimedAcceleration2D)
del TimedAcceleration2D

# struct TimedPoseVel2D
_0_RTC.TimedPoseVel2D = omniORB.newEmptyClass()
class TimedPoseVel2D (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/TimedPoseVel2D:1.0"

    def __init__(self, tm, data):
        self.tm = tm
        self.data = data

_0_RTC.TimedPoseVel2D = TimedPoseVel2D
_0_RTC._d_TimedPoseVel2D  = (omniORB.tcInternal.tv_struct, TimedPoseVel2D, TimedPoseVel2D._NP_RepositoryId, "TimedPoseVel2D", "tm", omniORB.typeMapping["IDL:RTC/Time:1.0"], "data", omniORB.typeMapping["IDL:RTC/PoseVel2D:1.0"])
_0_RTC._tc_TimedPoseVel2D = omniORB.tcInternal.createTypeCode(_0_RTC._d_TimedPoseVel2D)
omniORB.registerType(TimedPoseVel2D._NP_RepositoryId, _0_RTC._d_TimedPoseVel2D, _0_RTC._tc_TimedPoseVel2D)
del TimedPoseVel2D

# struct TimedSize2D
_0_RTC.TimedSize2D = omniORB.newEmptyClass()
class TimedSize2D (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/TimedSize2D:1.0"

    def __init__(self, tm, data):
        self.tm = tm
        self.data = data

_0_RTC.TimedSize2D = TimedSize2D
_0_RTC._d_TimedSize2D  = (omniORB.tcInternal.tv_struct, TimedSize2D, TimedSize2D._NP_RepositoryId, "TimedSize2D", "tm", omniORB.typeMapping["IDL:RTC/Time:1.0"], "data", omniORB.typeMapping["IDL:RTC/Size2D:1.0"])
_0_RTC._tc_TimedSize2D = omniORB.tcInternal.createTypeCode(_0_RTC._d_TimedSize2D)
omniORB.registerType(TimedSize2D._NP_RepositoryId, _0_RTC._d_TimedSize2D, _0_RTC._tc_TimedSize2D)
del TimedSize2D

# struct TimedGeometry2D
_0_RTC.TimedGeometry2D = omniORB.newEmptyClass()
class TimedGeometry2D (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/TimedGeometry2D:1.0"

    def __init__(self, tm, data):
        self.tm = tm
        self.data = data

_0_RTC.TimedGeometry2D = TimedGeometry2D
_0_RTC._d_TimedGeometry2D  = (omniORB.tcInternal.tv_struct, TimedGeometry2D, TimedGeometry2D._NP_RepositoryId, "TimedGeometry2D", "tm", omniORB.typeMapping["IDL:RTC/Time:1.0"], "data", omniORB.typeMapping["IDL:RTC/Geometry2D:1.0"])
_0_RTC._tc_TimedGeometry2D = omniORB.tcInternal.createTypeCode(_0_RTC._d_TimedGeometry2D)
omniORB.registerType(TimedGeometry2D._NP_RepositoryId, _0_RTC._d_TimedGeometry2D, _0_RTC._tc_TimedGeometry2D)
del TimedGeometry2D

# struct TimedCovariance2D
_0_RTC.TimedCovariance2D = omniORB.newEmptyClass()
class TimedCovariance2D (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/TimedCovariance2D:1.0"

    def __init__(self, tm, data):
        self.tm = tm
        self.data = data

_0_RTC.TimedCovariance2D = TimedCovariance2D
_0_RTC._d_TimedCovariance2D  = (omniORB.tcInternal.tv_struct, TimedCovariance2D, TimedCovariance2D._NP_RepositoryId, "TimedCovariance2D", "tm", omniORB.typeMapping["IDL:RTC/Time:1.0"], "data", omniORB.typeMapping["IDL:RTC/Covariance2D:1.0"])
_0_RTC._tc_TimedCovariance2D = omniORB.tcInternal.createTypeCode(_0_RTC._d_TimedCovariance2D)
omniORB.registerType(TimedCovariance2D._NP_RepositoryId, _0_RTC._d_TimedCovariance2D, _0_RTC._tc_TimedCovariance2D)
del TimedCovariance2D

# struct TimedPointCovariance2D
_0_RTC.TimedPointCovariance2D = omniORB.newEmptyClass()
class TimedPointCovariance2D (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/TimedPointCovariance2D:1.0"

    def __init__(self, tm, data):
        self.tm = tm
        self.data = data

_0_RTC.TimedPointCovariance2D = TimedPointCovariance2D
_0_RTC._d_TimedPointCovariance2D  = (omniORB.tcInternal.tv_struct, TimedPointCovariance2D, TimedPointCovariance2D._NP_RepositoryId, "TimedPointCovariance2D", "tm", omniORB.typeMapping["IDL:RTC/Time:1.0"], "data", omniORB.typeMapping["IDL:RTC/PointCovariance2D:1.0"])
_0_RTC._tc_TimedPointCovariance2D = omniORB.tcInternal.createTypeCode(_0_RTC._d_TimedPointCovariance2D)
omniORB.registerType(TimedPointCovariance2D._NP_RepositoryId, _0_RTC._d_TimedPointCovariance2D, _0_RTC._tc_TimedPointCovariance2D)
del TimedPointCovariance2D

# struct TimedCarlike
_0_RTC.TimedCarlike = omniORB.newEmptyClass()
class TimedCarlike (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/TimedCarlike:1.0"

    def __init__(self, tm, data):
        self.tm = tm
        self.data = data

_0_RTC.TimedCarlike = TimedCarlike
_0_RTC._d_TimedCarlike  = (omniORB.tcInternal.tv_struct, TimedCarlike, TimedCarlike._NP_RepositoryId, "TimedCarlike", "tm", omniORB.typeMapping["IDL:RTC/Time:1.0"], "data", omniORB.typeMapping["IDL:RTC/Carlike:1.0"])
_0_RTC._tc_TimedCarlike = omniORB.tcInternal.createTypeCode(_0_RTC._d_TimedCarlike)
omniORB.registerType(TimedCarlike._NP_RepositoryId, _0_RTC._d_TimedCarlike, _0_RTC._tc_TimedCarlike)
del TimedCarlike

# struct TimedSpeedHeading2D
_0_RTC.TimedSpeedHeading2D = omniORB.newEmptyClass()
class TimedSpeedHeading2D (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/TimedSpeedHeading2D:1.0"

    def __init__(self, tm, data):
        self.tm = tm
        self.data = data

_0_RTC.TimedSpeedHeading2D = TimedSpeedHeading2D
_0_RTC._d_TimedSpeedHeading2D  = (omniORB.tcInternal.tv_struct, TimedSpeedHeading2D, TimedSpeedHeading2D._NP_RepositoryId, "TimedSpeedHeading2D", "tm", omniORB.typeMapping["IDL:RTC/Time:1.0"], "data", omniORB.typeMapping["IDL:RTC/SpeedHeading2D:1.0"])
_0_RTC._tc_TimedSpeedHeading2D = omniORB.tcInternal.createTypeCode(_0_RTC._d_TimedSpeedHeading2D)
omniORB.registerType(TimedSpeedHeading2D._NP_RepositoryId, _0_RTC._d_TimedSpeedHeading2D, _0_RTC._tc_TimedSpeedHeading2D)
del TimedSpeedHeading2D

# struct TimedPoint3D
_0_RTC.TimedPoint3D = omniORB.newEmptyClass()
class TimedPoint3D (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/TimedPoint3D:1.0"

    def __init__(self, tm, data):
        self.tm = tm
        self.data = data

_0_RTC.TimedPoint3D = TimedPoint3D
_0_RTC._d_TimedPoint3D  = (omniORB.tcInternal.tv_struct, TimedPoint3D, TimedPoint3D._NP_RepositoryId, "TimedPoint3D", "tm", omniORB.typeMapping["IDL:RTC/Time:1.0"], "data", omniORB.typeMapping["IDL:RTC/Point3D:1.0"])
_0_RTC._tc_TimedPoint3D = omniORB.tcInternal.createTypeCode(_0_RTC._d_TimedPoint3D)
omniORB.registerType(TimedPoint3D._NP_RepositoryId, _0_RTC._d_TimedPoint3D, _0_RTC._tc_TimedPoint3D)
del TimedPoint3D

# struct TimedVector3D
_0_RTC.TimedVector3D = omniORB.newEmptyClass()
class TimedVector3D (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/TimedVector3D:1.0"

    def __init__(self, tm, data):
        self.tm = tm
        self.data = data

_0_RTC.TimedVector3D = TimedVector3D
_0_RTC._d_TimedVector3D  = (omniORB.tcInternal.tv_struct, TimedVector3D, TimedVector3D._NP_RepositoryId, "TimedVector3D", "tm", omniORB.typeMapping["IDL:RTC/Time:1.0"], "data", omniORB.typeMapping["IDL:RTC/Vector3D:1.0"])
_0_RTC._tc_TimedVector3D = omniORB.tcInternal.createTypeCode(_0_RTC._d_TimedVector3D)
omniORB.registerType(TimedVector3D._NP_RepositoryId, _0_RTC._d_TimedVector3D, _0_RTC._tc_TimedVector3D)
del TimedVector3D

# struct TimedOrientation3D
_0_RTC.TimedOrientation3D = omniORB.newEmptyClass()
class TimedOrientation3D (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/TimedOrientation3D:1.0"

    def __init__(self, tm, data):
        self.tm = tm
        self.data = data

_0_RTC.TimedOrientation3D = TimedOrientation3D
_0_RTC._d_TimedOrientation3D  = (omniORB.tcInternal.tv_struct, TimedOrientation3D, TimedOrientation3D._NP_RepositoryId, "TimedOrientation3D", "tm", omniORB.typeMapping["IDL:RTC/Time:1.0"], "data", omniORB.typeMapping["IDL:RTC/Orientation3D:1.0"])
_0_RTC._tc_TimedOrientation3D = omniORB.tcInternal.createTypeCode(_0_RTC._d_TimedOrientation3D)
omniORB.registerType(TimedOrientation3D._NP_RepositoryId, _0_RTC._d_TimedOrientation3D, _0_RTC._tc_TimedOrientation3D)
del TimedOrientation3D

# struct TimedPose3D
_0_RTC.TimedPose3D = omniORB.newEmptyClass()
class TimedPose3D (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/TimedPose3D:1.0"

    def __init__(self, tm, data):
        self.tm = tm
        self.data = data

_0_RTC.TimedPose3D = TimedPose3D
_0_RTC._d_TimedPose3D  = (omniORB.tcInternal.tv_struct, TimedPose3D, TimedPose3D._NP_RepositoryId, "TimedPose3D", "tm", omniORB.typeMapping["IDL:RTC/Time:1.0"], "data", omniORB.typeMapping["IDL:RTC/Pose3D:1.0"])
_0_RTC._tc_TimedPose3D = omniORB.tcInternal.createTypeCode(_0_RTC._d_TimedPose3D)
omniORB.registerType(TimedPose3D._NP_RepositoryId, _0_RTC._d_TimedPose3D, _0_RTC._tc_TimedPose3D)
del TimedPose3D

# struct TimedVelocity3D
_0_RTC.TimedVelocity3D = omniORB.newEmptyClass()
class TimedVelocity3D (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/TimedVelocity3D:1.0"

    def __init__(self, tm, data):
        self.tm = tm
        self.data = data

_0_RTC.TimedVelocity3D = TimedVelocity3D
_0_RTC._d_TimedVelocity3D  = (omniORB.tcInternal.tv_struct, TimedVelocity3D, TimedVelocity3D._NP_RepositoryId, "TimedVelocity3D", "tm", omniORB.typeMapping["IDL:RTC/Time:1.0"], "data", omniORB.typeMapping["IDL:RTC/Velocity3D:1.0"])
_0_RTC._tc_TimedVelocity3D = omniORB.tcInternal.createTypeCode(_0_RTC._d_TimedVelocity3D)
omniORB.registerType(TimedVelocity3D._NP_RepositoryId, _0_RTC._d_TimedVelocity3D, _0_RTC._tc_TimedVelocity3D)
del TimedVelocity3D

# struct TimedAngularVelocity3D
_0_RTC.TimedAngularVelocity3D = omniORB.newEmptyClass()
class TimedAngularVelocity3D (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/TimedAngularVelocity3D:1.0"

    def __init__(self, tm, data):
        self.tm = tm
        self.data = data

_0_RTC.TimedAngularVelocity3D = TimedAngularVelocity3D
_0_RTC._d_TimedAngularVelocity3D  = (omniORB.tcInternal.tv_struct, TimedAngularVelocity3D, TimedAngularVelocity3D._NP_RepositoryId, "TimedAngularVelocity3D", "tm", omniORB.typeMapping["IDL:RTC/Time:1.0"], "data", omniORB.typeMapping["IDL:RTC/AngularVelocity3D:1.0"])
_0_RTC._tc_TimedAngularVelocity3D = omniORB.tcInternal.createTypeCode(_0_RTC._d_TimedAngularVelocity3D)
omniORB.registerType(TimedAngularVelocity3D._NP_RepositoryId, _0_RTC._d_TimedAngularVelocity3D, _0_RTC._tc_TimedAngularVelocity3D)
del TimedAngularVelocity3D

# struct TimedAcceleration3D
_0_RTC.TimedAcceleration3D = omniORB.newEmptyClass()
class TimedAcceleration3D (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/TimedAcceleration3D:1.0"

    def __init__(self, tm, data):
        self.tm = tm
        self.data = data

_0_RTC.TimedAcceleration3D = TimedAcceleration3D
_0_RTC._d_TimedAcceleration3D  = (omniORB.tcInternal.tv_struct, TimedAcceleration3D, TimedAcceleration3D._NP_RepositoryId, "TimedAcceleration3D", "tm", omniORB.typeMapping["IDL:RTC/Time:1.0"], "data", omniORB.typeMapping["IDL:RTC/Acceleration3D:1.0"])
_0_RTC._tc_TimedAcceleration3D = omniORB.tcInternal.createTypeCode(_0_RTC._d_TimedAcceleration3D)
omniORB.registerType(TimedAcceleration3D._NP_RepositoryId, _0_RTC._d_TimedAcceleration3D, _0_RTC._tc_TimedAcceleration3D)
del TimedAcceleration3D

# struct TimedAngularAcceleration3D
_0_RTC.TimedAngularAcceleration3D = omniORB.newEmptyClass()
class TimedAngularAcceleration3D (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/TimedAngularAcceleration3D:1.0"

    def __init__(self, tm, data):
        self.tm = tm
        self.data = data

_0_RTC.TimedAngularAcceleration3D = TimedAngularAcceleration3D
_0_RTC._d_TimedAngularAcceleration3D  = (omniORB.tcInternal.tv_struct, TimedAngularAcceleration3D, TimedAngularAcceleration3D._NP_RepositoryId, "TimedAngularAcceleration3D", "tm", omniORB.typeMapping["IDL:RTC/Time:1.0"], "data", omniORB.typeMapping["IDL:RTC/AngularAcceleration3D:1.0"])
_0_RTC._tc_TimedAngularAcceleration3D = omniORB.tcInternal.createTypeCode(_0_RTC._d_TimedAngularAcceleration3D)
omniORB.registerType(TimedAngularAcceleration3D._NP_RepositoryId, _0_RTC._d_TimedAngularAcceleration3D, _0_RTC._tc_TimedAngularAcceleration3D)
del TimedAngularAcceleration3D

# struct TimedPoseVel3D
_0_RTC.TimedPoseVel3D = omniORB.newEmptyClass()
class TimedPoseVel3D (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/TimedPoseVel3D:1.0"

    def __init__(self, tm, data):
        self.tm = tm
        self.data = data

_0_RTC.TimedPoseVel3D = TimedPoseVel3D
_0_RTC._d_TimedPoseVel3D  = (omniORB.tcInternal.tv_struct, TimedPoseVel3D, TimedPoseVel3D._NP_RepositoryId, "TimedPoseVel3D", "tm", omniORB.typeMapping["IDL:RTC/Time:1.0"], "data", omniORB.typeMapping["IDL:RTC/PoseVel3D:1.0"])
_0_RTC._tc_TimedPoseVel3D = omniORB.tcInternal.createTypeCode(_0_RTC._d_TimedPoseVel3D)
omniORB.registerType(TimedPoseVel3D._NP_RepositoryId, _0_RTC._d_TimedPoseVel3D, _0_RTC._tc_TimedPoseVel3D)
del TimedPoseVel3D

# struct TimedSize3D
_0_RTC.TimedSize3D = omniORB.newEmptyClass()
class TimedSize3D (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/TimedSize3D:1.0"

    def __init__(self, tm, data):
        self.tm = tm
        self.data = data

_0_RTC.TimedSize3D = TimedSize3D
_0_RTC._d_TimedSize3D  = (omniORB.tcInternal.tv_struct, TimedSize3D, TimedSize3D._NP_RepositoryId, "TimedSize3D", "tm", omniORB.typeMapping["IDL:RTC/Time:1.0"], "data", omniORB.typeMapping["IDL:RTC/Size3D:1.0"])
_0_RTC._tc_TimedSize3D = omniORB.tcInternal.createTypeCode(_0_RTC._d_TimedSize3D)
omniORB.registerType(TimedSize3D._NP_RepositoryId, _0_RTC._d_TimedSize3D, _0_RTC._tc_TimedSize3D)
del TimedSize3D

# struct TimedGeometry3D
_0_RTC.TimedGeometry3D = omniORB.newEmptyClass()
class TimedGeometry3D (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/TimedGeometry3D:1.0"

    def __init__(self, tm, data):
        self.tm = tm
        self.data = data

_0_RTC.TimedGeometry3D = TimedGeometry3D
_0_RTC._d_TimedGeometry3D  = (omniORB.tcInternal.tv_struct, TimedGeometry3D, TimedGeometry3D._NP_RepositoryId, "TimedGeometry3D", "tm", omniORB.typeMapping["IDL:RTC/Time:1.0"], "data", omniORB.typeMapping["IDL:RTC/Geometry3D:1.0"])
_0_RTC._tc_TimedGeometry3D = omniORB.tcInternal.createTypeCode(_0_RTC._d_TimedGeometry3D)
omniORB.registerType(TimedGeometry3D._NP_RepositoryId, _0_RTC._d_TimedGeometry3D, _0_RTC._tc_TimedGeometry3D)
del TimedGeometry3D

# struct TimedCovariance3D
_0_RTC.TimedCovariance3D = omniORB.newEmptyClass()
class TimedCovariance3D (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/TimedCovariance3D:1.0"

    def __init__(self, tm, data):
        self.tm = tm
        self.data = data

_0_RTC.TimedCovariance3D = TimedCovariance3D
_0_RTC._d_TimedCovariance3D  = (omniORB.tcInternal.tv_struct, TimedCovariance3D, TimedCovariance3D._NP_RepositoryId, "TimedCovariance3D", "tm", omniORB.typeMapping["IDL:RTC/Time:1.0"], "data", omniORB.typeMapping["IDL:RTC/Covariance3D:1.0"])
_0_RTC._tc_TimedCovariance3D = omniORB.tcInternal.createTypeCode(_0_RTC._d_TimedCovariance3D)
omniORB.registerType(TimedCovariance3D._NP_RepositoryId, _0_RTC._d_TimedCovariance3D, _0_RTC._tc_TimedCovariance3D)
del TimedCovariance3D

# struct TimedSpeedHeading3D
_0_RTC.TimedSpeedHeading3D = omniORB.newEmptyClass()
class TimedSpeedHeading3D (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/TimedSpeedHeading3D:1.0"

    def __init__(self, tm, data):
        self.tm = tm
        self.data = data

_0_RTC.TimedSpeedHeading3D = TimedSpeedHeading3D
_0_RTC._d_TimedSpeedHeading3D  = (omniORB.tcInternal.tv_struct, TimedSpeedHeading3D, TimedSpeedHeading3D._NP_RepositoryId, "TimedSpeedHeading3D", "tm", omniORB.typeMapping["IDL:RTC/Time:1.0"], "data", omniORB.typeMapping["IDL:RTC/SpeedHeading3D:1.0"])
_0_RTC._tc_TimedSpeedHeading3D = omniORB.tcInternal.createTypeCode(_0_RTC._d_TimedSpeedHeading3D)
omniORB.registerType(TimedSpeedHeading3D._NP_RepositoryId, _0_RTC._d_TimedSpeedHeading3D, _0_RTC._tc_TimedSpeedHeading3D)
del TimedSpeedHeading3D

# struct TimedOAP
_0_RTC.TimedOAP = omniORB.newEmptyClass()
class TimedOAP (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/TimedOAP:1.0"

    def __init__(self, tm, data):
        self.tm = tm
        self.data = data

_0_RTC.TimedOAP = TimedOAP
_0_RTC._d_TimedOAP  = (omniORB.tcInternal.tv_struct, TimedOAP, TimedOAP._NP_RepositoryId, "TimedOAP", "tm", omniORB.typeMapping["IDL:RTC/Time:1.0"], "data", omniORB.typeMapping["IDL:RTC/OAP:1.0"])
_0_RTC._tc_TimedOAP = omniORB.tcInternal.createTypeCode(_0_RTC._d_TimedOAP)
omniORB.registerType(TimedOAP._NP_RepositoryId, _0_RTC._d_TimedOAP, _0_RTC._tc_TimedOAP)
del TimedOAP

# struct Quaternion
_0_RTC.Quaternion = omniORB.newEmptyClass()
class Quaternion (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/Quaternion:1.0"

    def __init__(self, x, y, z, w):
        self.x = x
        self.y = y
        self.z = z
        self.w = w

_0_RTC.Quaternion = Quaternion
_0_RTC._d_Quaternion  = (omniORB.tcInternal.tv_struct, Quaternion, Quaternion._NP_RepositoryId, "Quaternion", "x", omniORB.tcInternal.tv_double, "y", omniORB.tcInternal.tv_double, "z", omniORB.tcInternal.tv_double, "w", omniORB.tcInternal.tv_double)
_0_RTC._tc_Quaternion = omniORB.tcInternal.createTypeCode(_0_RTC._d_Quaternion)
omniORB.registerType(Quaternion._NP_RepositoryId, _0_RTC._d_Quaternion, _0_RTC._tc_Quaternion)
del Quaternion

# struct TimedQuaternion
_0_RTC.TimedQuaternion = omniORB.newEmptyClass()
class TimedQuaternion (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/TimedQuaternion:1.0"

    def __init__(self, tm, data):
        self.tm = tm
        self.data = data

_0_RTC.TimedQuaternion = TimedQuaternion
_0_RTC._d_TimedQuaternion  = (omniORB.tcInternal.tv_struct, TimedQuaternion, TimedQuaternion._NP_RepositoryId, "TimedQuaternion", "tm", omniORB.typeMapping["IDL:RTC/Time:1.0"], "data", omniORB.typeMapping["IDL:RTC/Quaternion:1.0"])
_0_RTC._tc_TimedQuaternion = omniORB.tcInternal.createTypeCode(_0_RTC._d_TimedQuaternion)
omniORB.registerType(TimedQuaternion._NP_RepositoryId, _0_RTC._d_TimedQuaternion, _0_RTC._tc_TimedQuaternion)
del TimedQuaternion

#
# End of module "RTC"
#
__name__ = "ExtendedDataTypes_idl"

_exported_modules = ( "RTC", )

# The end.
